
1.es6声明变量的方法有6种：var function let const import class
	1> 由var function 声明的变量是顶层对象的属性，也就是window的属性；
	2> 由let const class 声明的变量不是顶层对象的属性。

	
2.this：总是指向调用该方法的对象
	1> 如果函数作为对象的方法运行，那么this指向的是该对象；//obj.func，func中的this指的是obj；
	2> 如果函数不是作为对象的方法运行，而是单纯的作为函数运行，this会指向顶层对象;
	3> 使用call()、apply()、bind()绑定的，this指向绑定的对象；
	4> 箭头函数中的this是继承而来的，它默认指向定义该函数时所处的对象（宿主对象），而不是执行时的对象

2-1.__proto__属性:
	1.每一个javascript对象都一个原型对象prototype和属性__proto__；
	2.__proto__是一个指针，指向创建该对象的函数的prototype,也就是保存了prototype的地址；
	3.通过这个属性就可以拥有原型对象下的所有属性和方法，__proto__属性实际上就是实例化对象和原型对象之间的连接
	

2-2.原型链：每一个对象都有一个原型对象，而每个原型对象又可以是一个实例化对象，所以通过对象的__proto__属性就形成了一条原型链，可以访问到Object的原型对象
	1.原型链的访问规则：先在自身的下面寻找，再一级一级的往原型链上找；
	2.let obj= {}; //obj.__proto__ === Object.prototype,  Object.prototype.__proto__ === null；
	3.原型对象prototype中有一个预定义的构造函数constructor属性，用来引用它的函数对象，是一种循环引用；
	4.如果改变了对象的prototype，那么就要为新的prototype指定constructor属性，并将这个属性指向原来的对象


2-3.字面量法定义原型：
　　　function Person(name) {
　　　	this.name = name;
　　　}
　　　Person.prototype = { //相当于改变了Person.prototype
　　　	constructor: Person, //所以给Person.prototype.constructor重新指向Person
　　　	showName: function() {
　　　		console.info(this.name);
　　　	}
　　　}

		
3.变量的解构赋值：
	1> 数组的解构赋值：let [a,b]=[10,20]; //a=10,b=20；
	2> 对象的解构赋值：let {a,b}={a:10,b:20} //a=10;b=20；
	3> 函数参数的解构赋值：function add([x,y]){return x+y;} //add([1,2])=3;
	
	解构赋值的用途：
	1> 交换变量的值：let [x,y]=[1,2]; [x,y]=[y,x]；
	2> 从函数返回多个值：
		返回一个数组：function example(){return [1,2,3]}; let [a,b,c]=example(); //a=1,b=2,c=3
		返回一个对象：function example(){return {a:1,b:2,c:3}}; let {a,b,c}=example(); //a=1,b=2,c=3
	3> 函数参数的定义：
	参数是一组有序的值：function f([x,y]){return {x,y}}; f([1,2]) //{x:1,y:2}
	参数是一组无需的值：function f({y,x}){return {x,y}}; f({x:1,y:2}) //{x:1,y:2}
		
4.扩展运算符...：将对象中的每个元素都一个个的迭代并取出来变成单独的被使用
	1. let arr=[10]; arr.push(...[1,2,3]); //arr=[10,1,2,3]
　　 2. let str = 'asbjg'; [...str]; //['a','s','b','j','g']
	
5.逻辑或(||)、与(&&)：
	1> ||：如果||左边是真，那么返回的是左边的值，如果是假返回右边的值； 1||2 => 1; 0||2 => 2
	2>  &&：如果&&左边是真，返回的是右边的值，如果是假返回左边的值；  1&&2 =>2; 0&&2 => 0
	3> 如何看真假：只有 0、NaN、null、undefined、false、空字符串 为假,其余都是真；
	4> 当||和&&同时出现时，&&的优先级大于||； 0||1&&2||3 => 2

6.call()、apply()
	1> 相同点：都是在特定的作用域中调用函数，等于设置函数体内this对象的值，以扩充函数赖以运行的作用域；
	2> 不同点：1> apply()方法 接收两个参数，一个是函数运行的作用域（this），另一个是参数数组；  //func.apply(func1,[let1,let2,let3])
			  2> call()方法 第一个参数和apply()方法的一样，其它可以接受任何类型的参数;  func.call(func1,let1,let2,let3)
	
7.js自执行函数：
　　　作用：创建自己的命名空间，防止变量污染；
　　　写法：
		1> (function() {return 10;}()); jslint推荐写法
		2> (function() {return 10;})();
		3> !function() {return 10;}(); / +function() {...}(); / void function() 	{...}();
	
8.定义函数的方法：
	1.函数的声明：function f() {}; 函数声明提升；
	2.函数表达式：let f = function() {};
	3.区别：函数表达式在使用前必须先赋值

9.Set: 它类似于数组，但是成员的值都是唯一的，没有重复的值  
　　	const set = new Set([1,2,3]); //set={1,2,3}
	1.数组去重: [...new Set(array)];
	2.Set转数组：[...new Set([1,2,3])] //{1,2,3} => [1,2,3]
	3.数组转Set: new Set([1,2,3]) //[1,2,3] => {1,2,3}

10.Map对象：简单的键值对映射，其中键和值可以是任意值(而对象的键是字符串) const map= new Map([['one',10],[{'two':1}],20]); //map={one=>10, Object{two:1}=>20}
	1.Map转数组：[...new Map([[1,2],[3,4])] //{1=>2,3=>4} => [[1,2],[3,4]]
	2.数组转Map: new Map([[1,2],[3,4])) //[[1,2],[3,4]] => {1=>2,3=>4}
	3.Map转对象
	4.对象转Map
	5.Map转JSON
	6.JSON转Map
	

11.Symbol: 表示独一无二的值 //let s = Symbol('s');
	1.作为对象的属性名：不能用.表示法
		let s = Symbol();
		let obj = {
			a: 0,
			s: 10,
			[s]: 20
		}
		obj.s  //10
		obj['s']  //10
		obj[s]  //20
	2.作为对象的属性名，不会出现在for...in、for...of中,也不能被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回，但是有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有Symbol属性名
		let a = Symbol('a');
		let b = Symbol('b');
		const obj = {};
		obj['y'] = 'symbol';
		obj[a] = 'hello';
		obj[b] = 'world';
		for(let k of Object.keys(obj)) {
			console.info(k);  //y
		}
		for(let i in Object.keys(obj)) {
			console.info(i);  //0
		}
　　　const  objSymbols = Object.getOwnPropertySymbols(obj);
　　　//[Symbol(a),Symbol(b)]
	3.Symbol()与Symbol.for():
		1.Symbol('foo') !== Symbol('foo');
		2.Symbol.for('foo') === Symbol.for('foo'); //Symbol.for为Symbol值登记的
名字是全局环境的	

12.Object.create(): 使用一个指定的原型对象和一个属性对象创建一个新对象
	let parents = {
		name : "UW3C",
		bron : "2013",
		from : "China"
	}
	let child = Object.create(
		parents,
		{
			title : {
				value : "技术分享"
			},
			year : {
				value : "2"
			}
		}
	);
	child //{title: "技术分享", year: "2"}
	child.__proto__  //{name: "UW3C", bron: "2013", from: "China"}	



























13.js中的真假：
	1> 空数组[]、空对象{} 都为真；
	2> 空字符串''、0、null、undefined、NaN为假、false

14.v-for遍历对象：
	<ul>
		<li v-for='(val,key,index) in obj'></li> <!-- 参数顺序为val、key、index -->
	</ul>

15.遍历js数组：
	let arr = [10,20,30];
	1.	arr.forEach((item,index) => {
			console.info(item) //10  20  30
			console.info(index) //0  1  2
		}) 
	2.	for(let item of arr) {
            console.info(item); //10  20  30
        }
	3.	for(let i in arr) {
            console.info(i); //0  1  2
        }

16.遍历js对象：
	let obj = {
		a: 10, 
		b: 20
	}
	1.	for(let key in obj) {
			console.info(key,obj[key]); //a 10   b 20
		}
	2.遍历key:	Object.keys(obj); //['a','b']
	3.遍历value:	Object.values(obj); //[10,20]
	4.	let {entries} = Object;	
		for(let [key,value] of entries(obj)) {
			console.info(key,value); //a 10   b 20
		}

17.nodeType：节点类型
	nodeType === 1 元素节点
	nodeType === 2 属性节点
	nodeType === 3 文本节点
	nodeType === 8 注释节点
	nodeType === 9 文档节点

18.querySelector()：返回文档中匹配指定 CSS 选择器的一个元素
	querySelector() 方法仅仅返回匹配指定选择器的第一个元素。如果你需要返回所有的元素，请使用 querySelectorAll() 方法替代
19.createElement()与createDocumentFragment()的区别：
	1.createElement是创建一个新的元素节点，而createDocumentFragment是创建一个文档对象或者是文档碎片节点；
	2.createDocumentFragment主要是避免因createElement多次添加引起的效率问题，它相当于一个占位符

20.appendChild()向节点添加最后一个子节点;

21.eval(string) 函数可计算某个字符串，并执行其中的的 JavaScript 代码

22.reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值
	语法：array.reduce(function(prevValue, currentValue), initialValue)
	const number = [20,30,50];
	const sum = reduce((prev,curr) => {
		return prev + curr;
	},100);
	//sum = 200;

23.rest参数 ...rest:将函数多余的参数保存在rest数组中，并且只能出现在参数末尾	function fn(...args) {
		console.info(args.length);
	}
	fn(); //0
	fn(a,b); //2
	
24.replace:
　　　1.
	const str = '111-{{data.name}} - {{id}}';
	const reg = /\{\{([^}]+)\}\}/g;  //匹配{{}}
	const rStr = str.replace(reg,(...args) => { //rest参数
		console.info(args);
		//第一次匹配 ["{{data.name}}","data.name",4, "111-{{data.name}} - {{id}}"]
		//第二次匹配 ["{{id}}", "id", 20, "111-{{data.name}} - {{id}}"]
		return 213; //把匹配项替换为213；（可做进一步操作）
	});
	//rStr = '111-213 - 213';
　　　2.
　　　const str = 'z_25_kk_37_x';
　　　const reg = /_(\d{2,})_/g;
　　　const rStr = str.replace(reg,function() {
　　　console.info(arguments);
　　　//第一次匹配 ["_25_", "25", 1, "z_25_kk_37_x"]
		//第二次匹配 ["_37_", "37", 7, "z_25_kk_37_x"]
　　　Return arguments[1]*10;
　　　});
　　　rStr = 'z250kk370x';
25.

26.javascript闭包(closure)：能够读取其它函数内部变量的函数，也就是定义在一个函数内部的函数
　　	closure的作用：1>.读取函数内部的变量 2>.让这些变量始终保存在内存中
	function f1() {
		const n = 100;
		function f2() {
			console.info(n);
		}
		return f2;
	}
	const f = f1();
	f(); //100

27.RegExp对象
　　　1.点字符：匹配除\r、\n、行分隔符、段分隔符以外的所有字符
　　　2.预定义模式：
　　　	\d === [0-9]  \D === [^0-9]
　　　	\w === [0-9a-zA-Z_]  \W === [^0-9a-zA-Z_]
　　　	\s === [ \t\r\n\v\f]   \S === [^ \t\r\n\v\f]
　　　3.量词符：? * +
　　　	? === {0,1}
　　　	* === {0,}
　　　	+ === {1,}
　　　4.量词符后加?为非贪婪模式：
　　　	*?表示某个模式出现0或多次，匹配时采用非贪婪模式
　　　	+?表示某个模式出现1或多次，匹配时采用非贪婪模式
　　　5.修饰符：
　　　	g全局匹配
　　　	i忽略大小写
　　　	m多行匹配(^和$会识别换行符\n)
　　　6.组匹配：（）

28.模块功能主要由两命令构成：export、import
　　　export命令用于规定模块对外的接口，import命令用于输入其它模块提供的功能
　　　如1.js文件：
　　　const [a,b] = [10,20];
　　　export {a,b};
　　　2.js文件：
　　　const {a,b} from './1.js';
　　　console.info(a) //10

29.跨域：浏览器从一个域名的页面去请求另一个域名的资源时，域名、端口、协议任一不同都是跨域;　
　　　

30.求数组的最值
　　　1>. apply()方法：
　　　const max = Math.max.apply(null, arr);
　　　2>. es6方法：
　　　const max = Math.max(...arr);

31.异步任务的内容：分为微任务和宏任务；微任务包括：promise...等，宏任务包括：setTimeout、setIntval...等。并且微任务的优先级高于宏任务
	
